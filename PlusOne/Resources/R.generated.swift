//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `Background2`.
    static let background2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Background2")
    /// Color `Background3`.
    static let background3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Background3")
    /// Color `BackgroundAltList`.
    static let backgroundAltList = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundAltList")
    /// Color `Background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "Background")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Background2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Background3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundAltList", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundAltList(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundAltList, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Background2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Background3", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background3(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background3.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BackgroundAltList", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundAltList(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundAltList.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `launchscreen`.
    static let launchscreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "launchscreen")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launchscreen", bundle: ..., traitCollection: ...)`
    static func launchscreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchscreen, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 31 localization keys.
    struct localizable {
      /// en translation: 
      ///
      /// Locales: en
      static let newCounterOtherUnitPlaceholder = Rswift.StringResource(key: "newCounter.other.unitPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 0
      ///
      /// Locales: en
      static let newCounterMainInfoInitialValuePlaceholder = Rswift.StringResource(key: "newCounter.mainInfo.initialValuePlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 1
      ///
      /// Locales: en
      static let newCounterOtherIncrementPlaceholder = Rswift.StringResource(key: "newCounter.other.incrementPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: en
      static let newCounterAdd = Rswift.StringResource(key: "newCounter.add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add Counter
      ///
      /// Locales: en
      static let macToolbarAddCounter = Rswift.StringResource(key: "macToolbar.addCounter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: All Counters
      ///
      /// Locales: en
      static let sidebarSectionAllCounters = Rswift.StringResource(key: "sidebar.section.allCounters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are you sure you want to delete this counter?
      ///
      /// Locales: en
      static let counterCellDeleteAlertMessage = Rswift.StringResource(key: "counterCell.deleteAlert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Automation
      ///
      /// Locales: en
      static let tabBarAutomation = Rswift.StringResource(key: "tabBar.automation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let alertCancel = Rswift.StringResource(key: "alert.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Counters
      ///
      /// Locales: en
      static let tabBarCounters = Rswift.StringResource(key: "tabBar.counters", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Delete %@?
      ///
      /// Locales: en
      static let counterCellDeleteAlertTitle = Rswift.StringResource(key: "counterCell.deleteAlert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Delete...
      ///
      /// Locales: en
      static let counterCellOptionsDelete = Rswift.StringResource(key: "counterCell.options.delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en
      static let counterCellOptionsEdit = Rswift.StringResource(key: "counterCell.options.edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Edit Counter
      ///
      /// Locales: en
      static let newCounterEditTitle = Rswift.StringResource(key: "newCounter.edit.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: History
      ///
      /// Locales: en
      static let counterCellOptionsHistory = Rswift.StringResource(key: "counterCell.options.history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Increment
      ///
      /// Locales: en
      static let newCounterOtherIncrementLabel = Rswift.StringResource(key: "newCounter.other.incrementLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Initial value
      ///
      /// Locales: en
      static let newCounterMainInfoInitialValueLabel = Rswift.StringResource(key: "newCounter.mainInfo.initialValueLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Main Info
      ///
      /// Locales: en
      static let newCounterMainInfoSectionTitle = Rswift.StringResource(key: "newCounter.mainInfo.sectionTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en
      static let newCounterMainInfoNameLabel = Rswift.StringResource(key: "newCounter.mainInfo.nameLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: New Counter
      ///
      /// Locales: en
      static let newCounterNewTitle = Rswift.StringResource(key: "newCounter.new.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: New counter
      ///
      /// Locales: en
      static let newCounterMainInfoNamePlaceholder = Rswift.StringResource(key: "newCounter.mainInfo.namePlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Other
      ///
      /// Locales: en
      static let newCounterOtherSectionTitle = Rswift.StringResource(key: "newCounter.other.sectionTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: PlusOne
      ///
      /// Locales: en
      static let appTitle = Rswift.StringResource(key: "appTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en
      static let newCounterSave = Rswift.StringResource(key: "newCounter.save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en
      static let search = Rswift.StringResource(key: "search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en
      static let tabBarSettings = Rswift.StringResource(key: "tabBar.settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Tags
      ///
      /// Locales: en
      static let sidebarSectionTags = Rswift.StringResource(key: "sidebar.section.tags", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Tags
      ///
      /// Locales: en
      static let tabBarTags = Rswift.StringResource(key: "tabBar.tags", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unit
      ///
      /// Locales: en
      static let newCounterOtherUnitLabel = Rswift.StringResource(key: "newCounter.other.unitLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en
      static let alertYes = Rswift.StringResource(key: "alert.yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You have no counters at the moment, use the + button to add one!
      ///
      /// Locales: en
      static let countersCollectionEmptyLabelMessage = Rswift.StringResource(key: "countersCollection.emptyLabel.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: 
      ///
      /// Locales: en
      static func newCounterOtherUnitPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newCounter.other.unitPlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newCounter.other.unitPlaceholder"
        }

        return NSLocalizedString("newCounter.other.unitPlaceholder", bundle: bundle, comment: "")
      }

      /// en translation: 0
      ///
      /// Locales: en
      static func newCounterMainInfoInitialValuePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newCounter.mainInfo.initialValuePlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newCounter.mainInfo.initialValuePlaceholder"
        }

        return NSLocalizedString("newCounter.mainInfo.initialValuePlaceholder", bundle: bundle, comment: "")
      }

      /// en translation: 1
      ///
      /// Locales: en
      static func newCounterOtherIncrementPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newCounter.other.incrementPlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newCounter.other.incrementPlaceholder"
        }

        return NSLocalizedString("newCounter.other.incrementPlaceholder", bundle: bundle, comment: "")
      }

      /// en translation: Add
      ///
      /// Locales: en
      static func newCounterAdd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newCounter.add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newCounter.add"
        }

        return NSLocalizedString("newCounter.add", bundle: bundle, comment: "")
      }

      /// en translation: Add Counter
      ///
      /// Locales: en
      static func macToolbarAddCounter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("macToolbar.addCounter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "macToolbar.addCounter"
        }

        return NSLocalizedString("macToolbar.addCounter", bundle: bundle, comment: "")
      }

      /// en translation: All Counters
      ///
      /// Locales: en
      static func sidebarSectionAllCounters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sidebar.section.allCounters", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sidebar.section.allCounters"
        }

        return NSLocalizedString("sidebar.section.allCounters", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete this counter?
      ///
      /// Locales: en
      static func counterCellDeleteAlertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("counterCell.deleteAlert.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "counterCell.deleteAlert.message"
        }

        return NSLocalizedString("counterCell.deleteAlert.message", bundle: bundle, comment: "")
      }

      /// en translation: Automation
      ///
      /// Locales: en
      static func tabBarAutomation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tabBar.automation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tabBar.automation"
        }

        return NSLocalizedString("tabBar.automation", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func alertCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert.cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert.cancel"
        }

        return NSLocalizedString("alert.cancel", bundle: bundle, comment: "")
      }

      /// en translation: Counters
      ///
      /// Locales: en
      static func tabBarCounters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tabBar.counters", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tabBar.counters"
        }

        return NSLocalizedString("tabBar.counters", bundle: bundle, comment: "")
      }

      /// en translation: Delete %@?
      ///
      /// Locales: en
      static func counterCellDeleteAlertTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("counterCell.deleteAlert.title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "counterCell.deleteAlert.title"
        }

        let format = NSLocalizedString("counterCell.deleteAlert.title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Delete...
      ///
      /// Locales: en
      static func counterCellOptionsDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("counterCell.options.delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "counterCell.options.delete"
        }

        return NSLocalizedString("counterCell.options.delete", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en
      static func counterCellOptionsEdit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("counterCell.options.edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "counterCell.options.edit"
        }

        return NSLocalizedString("counterCell.options.edit", bundle: bundle, comment: "")
      }

      /// en translation: Edit Counter
      ///
      /// Locales: en
      static func newCounterEditTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newCounter.edit.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newCounter.edit.title"
        }

        return NSLocalizedString("newCounter.edit.title", bundle: bundle, comment: "")
      }

      /// en translation: History
      ///
      /// Locales: en
      static func counterCellOptionsHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("counterCell.options.history", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "counterCell.options.history"
        }

        return NSLocalizedString("counterCell.options.history", bundle: bundle, comment: "")
      }

      /// en translation: Increment
      ///
      /// Locales: en
      static func newCounterOtherIncrementLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newCounter.other.incrementLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newCounter.other.incrementLabel"
        }

        return NSLocalizedString("newCounter.other.incrementLabel", bundle: bundle, comment: "")
      }

      /// en translation: Initial value
      ///
      /// Locales: en
      static func newCounterMainInfoInitialValueLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newCounter.mainInfo.initialValueLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newCounter.mainInfo.initialValueLabel"
        }

        return NSLocalizedString("newCounter.mainInfo.initialValueLabel", bundle: bundle, comment: "")
      }

      /// en translation: Main Info
      ///
      /// Locales: en
      static func newCounterMainInfoSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newCounter.mainInfo.sectionTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newCounter.mainInfo.sectionTitle"
        }

        return NSLocalizedString("newCounter.mainInfo.sectionTitle", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en
      static func newCounterMainInfoNameLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newCounter.mainInfo.nameLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newCounter.mainInfo.nameLabel"
        }

        return NSLocalizedString("newCounter.mainInfo.nameLabel", bundle: bundle, comment: "")
      }

      /// en translation: New Counter
      ///
      /// Locales: en
      static func newCounterNewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newCounter.new.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newCounter.new.title"
        }

        return NSLocalizedString("newCounter.new.title", bundle: bundle, comment: "")
      }

      /// en translation: New counter
      ///
      /// Locales: en
      static func newCounterMainInfoNamePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newCounter.mainInfo.namePlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newCounter.mainInfo.namePlaceholder"
        }

        return NSLocalizedString("newCounter.mainInfo.namePlaceholder", bundle: bundle, comment: "")
      }

      /// en translation: Other
      ///
      /// Locales: en
      static func newCounterOtherSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newCounter.other.sectionTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newCounter.other.sectionTitle"
        }

        return NSLocalizedString("newCounter.other.sectionTitle", bundle: bundle, comment: "")
      }

      /// en translation: PlusOne
      ///
      /// Locales: en
      static func appTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appTitle"
        }

        return NSLocalizedString("appTitle", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en
      static func newCounterSave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newCounter.save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newCounter.save"
        }

        return NSLocalizedString("newCounter.save", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "search"
        }

        return NSLocalizedString("search", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en
      static func tabBarSettings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tabBar.settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tabBar.settings"
        }

        return NSLocalizedString("tabBar.settings", bundle: bundle, comment: "")
      }

      /// en translation: Tags
      ///
      /// Locales: en
      static func sidebarSectionTags(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sidebar.section.tags", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sidebar.section.tags"
        }

        return NSLocalizedString("sidebar.section.tags", bundle: bundle, comment: "")
      }

      /// en translation: Tags
      ///
      /// Locales: en
      static func tabBarTags(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tabBar.tags", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tabBar.tags"
        }

        return NSLocalizedString("tabBar.tags", bundle: bundle, comment: "")
      }

      /// en translation: Unit
      ///
      /// Locales: en
      static func newCounterOtherUnitLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("newCounter.other.unitLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "newCounter.other.unitLabel"
        }

        return NSLocalizedString("newCounter.other.unitLabel", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en
      static func alertYes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert.yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert.yes"
        }

        return NSLocalizedString("alert.yes", bundle: bundle, comment: "")
      }

      /// en translation: You have no counters at the moment, use the + button to add one!
      ///
      /// Locales: en
      static func countersCollectionEmptyLabelMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("countersCollection.emptyLabel.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "countersCollection.emptyLabel.message"
        }

        return NSLocalizedString("countersCollection.emptyLabel.message", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
